function QREF = IKController(BIPED, STATE, XREF, X)
%#codegen

    % -------------------------------------------------------------

    persistent HOLD LAST STEP BREAKPOINT

    if isempty(HOLD)
        HOLD = struct('TO', X(4:6), 'Q', X(7:20)); 
    end
    
    if isempty(LAST)
        LAST = struct('QREF', HOLD.Q); 
    end
    
    if isempty(STEP)
        STEP = 0; 
    end
    
    if isempty(BREAKPOINT)
        BREAKPOINT = 30; 
    end
    
    STEP = min(STEP+1, BREAKPOINT);
    
    % -------------------------------------------------------------
    % MAIN FUNCTION
    % -------------------------------------------------------------
    
	QREF = LAST.QREF; TO = X(4:6); Q = X(7:20); 
    QREF([1 5]) = 0; 
    QREF([8 12]) = 0;
    QREF(13) = Q(13); 
    QREF(14) = Q(14); 

	p = Q(13) - LAST.QREF(13);
	r = Q(14) - LAST.QREF(14);
    
    %[LThigh, LShank, LAnkle] = LegLengths(BIPED.L); 
    
    QREF(3) = LAST.QREF(3) + p; 
    QREF(6) = LAST.QREF(6) + p; 
    QREF(2) = LAST.QREF(2) + r; 
    QREF(7) = LAST.QREF(7) + r; 
    % -------------------------------------------------------------
    
    if (STEP == BREAKPOINT)
        STEP = 0; 
    end
    
    LAST.QREF = QREF; 

end

function [LThigh, LShank, LAnkle] = LegLengths(LEG)

    OHip = LEG.O(:,3); 
    OKnee = LEG.O(:,4); 
    OAnkle = LEG.O(:,6); 

    LThigh = norm(OHip-OKnee,2); 
    LShank = norm(OKnee-OAnkle,2); 
    LAnkle = 0.06480;
    
end

function [QHip, QKnee] = LegIK(P, LThigh, LShank)

    X = P(1); 
    Z = P(3); 

    D = ((X^2) + (Z^2) - (LShank^2) - (LThigh^2)) / (2*LShank*LThigh); 
    
    if (D > 1) 
        % This case occurs when the target is out of the workspace reach
        QKnee = 0; 
        
    else
        QKnee = atan2(sqrt(1-(D^2)), D);
        
        if (QKnee < 0)  
            % Always pick the +ve knee angle solution. 
            QKnee = atan2(-sqrt(1-(D^2)), D);
        end
    end
    
    
    QHip = atan(X/Z) - atan( ...
        (LShank * sin(QKnee)) / ...
        (LThigh + LShank*cos(QKnee)) ...
        );

end

function [ P0 ] = Transform(T0W, PW)

    P = T0W * [PW; 1]; 
    P0 = P(1:3); 
    
end